# $Id: configure.in,v 1.8 2006/09/28 07:52:11 roman Exp $
# ===========================================================================
#
# GNU autoconf template for tichu-server
#
# initialize autoconf (require version 2.5x)
# ---------------------------------------------------------------------------
AC_PREREQ(2.50)
AC_INIT([libchaos],[2.1.0])

# check for compiling modes
# ---------------------------------------------------------------------------
AC_CHECK_COLOR

# set some info stuff
# ---------------------------------------------------------------------------
AC_SET_ARGS
PACKAGE_RELEASE="peace & love hippie edition"
AC_DEFINE_UNQUOTED(PACKAGE_RELEASE, "$PACKAGE_RELEASE", [Define to the release name of this package.])

VERSION=${PACKAGE_VERSION%%[[a-z]]*}

VERSION_MAJOR=${VERSION%%.[[0-9]]*}
VERSION_MINOR=${VERSION#*[0-9].}
VERSION_MINOR=${VERSION_MINOR%.[[0-9]]*}
VERSION_PATCH=${VERSION##*[0-9].}

AC_SUBST(VERSION_MAJOR)
AC_SUBST(VERSION_MINOR)
AC_SUBST(VERSION_PATCH)

CREATION=$(date)
PLATFORM=$(uname -a)
AC_DEFINE_UNQUOTED(CREATION, "$CREATION", [Creation time of this server])
AC_DEFINE_UNQUOTED(PLATFORM, "$PLATFORM", [Platform this server runs on])

# set directories
# ---------------------------------------------------------------------------
AC_CONFIG_HEADERS([config.h include/libchaos/config.h])
AC_CONFIG_SRCDIR([src/mem.c])

# set extensions and flags
# ---------------------------------------------------------------------------
SHEXT="so"
DFLAGS="-g -ggdb"
WFLAGS="-Wall -Werror"
FFLAGS=""

# check for libs and programs needed to build tichu-server
# ---------------------------------------------------------------------------
AC_DIETLIBC([/opt/diet /usr/diet])
AC_PROG_CC([cc gcc])
AC_PROG_AR
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN
AC_PROG_DLLWRAP

# check some system dependencies
# ---------------------------------------------------------------------------
AC_CANONICAL_HOST

AC_CONFIG_HOST
AC_CONFIG_DYLIB

AC_CHECK_HEADERS([fcntl.h io.h signal.h unistd.h sys/ioctl.h sys/mman.h sys/select.h sys/socket.h sys/time.h sys/timeb.h sys/wait.h dlfcn.h netinet/in.h cygwin/in.h net/ethernet.h net/bpf.h linux/types.h linux/filter.h])
AC_FUNC_MMAP

AC_CHECK_SSL
AC_CHECK_FT2
AC_CHECK_PSQL
AC_CHECK_MYSQL

dnl AC_CHECK_FUNC([ltoa], AC_DEFINE_UNQUOTED([HAVE_LTOA], [Define this if you have the ltoa() function (defined in stdlib.h usually)]))
dnl AC_CHECK_FUNC([lltoa], AC_DEFINE_UNQUOTED([HAVE_LLTOA], [Define this if you have the ltoa() function (defined in stdlib.h usually)]))

AC_C_BIGENDIAN([ENDIAN="ENDIAN_BIG"], 
               [ENDIAN="ENDIAN_LIL"])
    
AC_SUBST(ENDIAN)
AC_DEFINE_UNQUOTED(ENDIAN_LIL, 0, [Little endian machine])
AC_DEFINE_UNQUOTED(ENDIAN_BIG, 1, [Big endian machine])
AC_DEFINE_UNQUOTED(ENDIAN, $ENDIAN, [Define your machines endian])

IA32INLINE="0"

# check for winsuck
AC_CHECK_HEADER([winsock2.h])

# FIXME: must be declared as pascal call and must have 2 arguments (8 bytes)
dnl AC_CHECK_LIB([ws2_32], [WSAStartup])
dnl AC_CHECK_LIB([wsock32], [WSAStartup])

AC_DEFINE_UNQUOTED([USE_SELECT], [1], [Use select() for i/o multiplexing])

ac_cv_LIBS="$LIBS"
LIBS="$LIBS -lws2_32"

AC_MSG_CHECKING([for winsock2])
AC_TRY_COMPILE([#include <winsock2.h>], 
  [WSAStartup(0,0)],
  AC_MSG_RESULT([yes]),
  [AC_MSG_RESULT([no])
  LIBS="$ac_cv_libs"])

# runtime linker
case "$host" in
  *darwin*)
    PIE_LOADER="dlfcn_darwin"
    ;;
  *mingw32*)
    PIE_LOADER="dlfcn_win32"
    ;;
  *freebsd*)
    AC_DEFINE_UNQUOTED([HAVE_SOCKET_FILTER], [1], [Define this if your OS has a socket-based filtering mechanism])
    AC_DEFINE_UNQUOTED([BSD_SOCKET_FILTER], [1], [Define this if you have BSD-type socket filters])
    ;;
  *linux*)
    AC_DEFINE_UNQUOTED([HAVE_SOCKET_FILTER], [1], [Define this if your OS has a socket-based filtering mechanism])
    AC_DEFINE_UNQUOTED([LINUX_SOCKET_FILTER], [1], [Define this if you have Linux-type socket filters])
    ;;
esac

case $prefix in
  *chaos*)
    plugindir=${libdir}
    ;;
  *)
    plugindir=${libdir}/libchaos
    ;;
esac
AC_ARG_WITH([plugindir], [  --with-plugindir=PATH   location of the plugins [[LIBDIR/libchaos]]],
[if test "$withval" != "yes" && test "$withval" != "no"; then eval plugindir=$withval; fi])
AC_SUBST([plugindir])


#if test "$libdir" != /lib && test "$libdir" != /usr/lib; then
#  LDFLAGS="${LDFLAGS:+$LDFLAGS }-Xlinker -rpath=\$(libdir)"
#  PIE_LDFLAGS="${PIE_LDFLAGS:+$PIE_LDFLAGS }-Xlinker -rpath=\$(libdir)"
#fi

dnl LDFLAGS="${LDFLAGS:+$LDFLAGS }-rdynamic"
DEFS='-DBUILD_CHAOS'

AC_SUBST([LDFLAGS])
AC_SUBST([DEFS])

AC_CHECK_LIB([m], [cos])

test "$HAVE_SSL" = yes && SSL_DISABLED='#' || SSL_ENABLED='#'
AC_SUBST([SSL_ENABLED],[$SSL_ENABLED])
AC_SUBST([SSL_DISABLED],[$SSL_DISABLED])

AC_SUBST([DLFCN_LDADD])

# set debugging stuff after compiler test (-Werror could fuck it up)
# ---------------------------------------------------------------------------
AC_CHECK_DEP
AC_CHECK_DEBUG
AC_CHECK_MAINTAINER

# library subdirectories
# ---------------------------------------------------------------------------
AC_CONFIG_FILES([
Makefile
config.mk
build.mk
m4/Makefile
include/Makefile
include/libchaos/Makefile
servauth/Makefile
src/Makefile
test/Makefile])

AC_CONFIG_STATUS
_AC_OUTPUT_HEADERS

# be verbose :)
# ---------------------------------------------------------------------------
AC_SUMMARIZE([prefix bindir datadir includedir],
             [COLOR DEP DEBUG |
              CC CFLAGS LDFLAGS LIBS |
              SSL_CFLAGS SSL_LIBS
              FT2_CFLAGS FT2_LIBS 
              PSQL_CFLAGS PSQL_LIBS
              MYSQL_CFLAGS MYSQL_LIBS |
              host build],
             "%20s: %s")
